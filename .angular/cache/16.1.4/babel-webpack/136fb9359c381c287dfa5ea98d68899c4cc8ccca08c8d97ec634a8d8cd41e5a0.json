{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let ImageProcessingService = /*#__PURE__*/(() => {\n  class ImageProcessingService {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n    createImages(product) {\n      const productImages = product.productImages;\n      const productImagesToFileHandle = [];\n      for (let i = 0; i < productImages.length; i++) {\n        const imageFileData = productImages[i];\n        const imageBlob = this.dataURItoBlob(imageFileData.picByte, imageFileData.type);\n        const imageFile = new File([imageBlob], imageFileData.name, {\n          type: imageFileData.type\n        });\n        const finalFileHandle = {\n          file: imageFile,\n          url: this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(imageFile))\n        };\n        productImagesToFileHandle.push(finalFileHandle);\n      }\n      product.productImages = productImagesToFileHandle;\n      return product;\n    }\n    dataURItoBlob(picBytes, imageType) {\n      const byteString = window.atob(picBytes);\n      const arrayBuffer = new ArrayBuffer(byteString.length);\n      const int8Array = new Uint8Array(arrayBuffer);\n      for (let i = 0; i < byteString.length; i++) {\n        int8Array[i] = byteString.charCodeAt(i);\n      }\n      const blob = new Blob([int8Array], {\n        type: imageType\n      });\n      return blob;\n    }\n  }\n  ImageProcessingService.ɵfac = function ImageProcessingService_Factory(t) {\n    return new (t || ImageProcessingService)(i0.ɵɵinject(i1.DomSanitizer));\n  };\n  ImageProcessingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageProcessingService,\n    factory: ImageProcessingService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImageProcessingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}